#Coding : utf-8
#Coding by Yodavatar
#Licensed code MIT License
#App : PasswordGenerator

import string

class security:
    """
    This class is responsible for the security features of the Password Generator application.
    It includes methods to generate a secure password based on user preferences.
    """
    def __init__(self, password: str) -> None:
        """
        Initializes the security class with a password.
        """
        self.password = password

    def security_level(self) -> str:
        """
        Check if the password meets security criteria.
        Returns a string indicating the security level of the password.
        """
        if self.IS_EXTREMELY_VULNERABLE():
            return "Extremely Vulnerable"
        elif self.IS_VULNERABLE():
            return "Vulnerable"
        elif self.IS_NORMAL():
            return "Normal"
        elif self.IS_SECURE():
            return "Secure"
        elif self.IS_PERFECT():
            return "Perfect"
        else:
            return "Secure"

    def IS_EXTREMELY_VULNERABLE(self) -> bool:
        """
        Check if the password contains only letters or only digits.
        """
        dico = self.descriptionpassword()
        if len(self.password) < 6:
            return True
        elif dico["uppercase"] == 0 and dico["lowercase"] > 0 and dico["letter"] == 0 and dico["symbol"] == 0:
            return True
        elif dico["uppercase"] == 0 and dico["lowercase"] == 0 and dico["letter"] > 0 and dico["symbol"] == 0:
            return True
        else:
            return False

    def IS_VULNERABLE(self) -> bool:
        """
        Check if the password contains only letters and only digits.
        """
        dico = self.descriptionpassword()
        if len(self.password) < 8:
            return True
        elif dico["uppercase"] <= 2 and dico["lowercase"] > 0 and dico["letter"] < 2 and dico["symbol"] == 0:
            return True
        else:
            return False

    def IS_NORMAL(self) -> bool:
        """
        Check if the password contains letters, digits, and symbols.
        """
        dico = self.descriptionpassword()
        if dico["uppercase"] > 0 and dico["lowercase"] > 0 and dico["letter"] > 0 and dico["symbol"] == 1 or dico["symbol"] == 0:
            return True
        elif len(self.password) < 11:
            return True
        else:
            return False

    def IS_SECURE(self) -> bool:
        """
        Check if the password contains letters, digits, and symbols.
        """
        dico = self.descriptionpassword()
        if len(self.password) < 15:
            return True
        elif len(self.password) >= 16:
            return False
        elif dico["uppercase"] > 0 and dico["lowercase"] > 0 and dico["letter"] > 0 and dico["symbol"] > 0:
            return True
        return False

    def IS_PERFECT(self) -> bool:
        """
        Check if the password contains letters, digits, and symbols.
        """
        if len(self.password) >= 16:
            dico = self.descriptionpassword()
            if dico["uppercase"] > 0 and dico["lowercase"] > 0 and dico["letter"] > 0 and dico["symbol"] > 0:
                return True
        return False
    
    def descriptionpassword(self) -> dict:
        """
        Returns a dictionary with the number of uppercase, lowercase, letters, and symbols in the password.
        """
        dico = {
            "uppercase": 0,
            "lowercase": 0,
            "letter": 0,
            "symbol": 0,
        }
        for car in self.password:
            if car in string.ascii_letters:
                if car in string.ascii_uppercase:
                    dico["uppercase"] += 1
                else:
                    dico["lowercase"] += 1
            elif car in string.digits:
                dico["letter"] += 1
            elif car in string.punctuation:
                dico["symbol"] += 1
        return dico

#The password security criteria is classified from extremely vulnerable to perfect
#In the order : Extremely Vulnerable, Vulnerable, Normal, Secure, Perfect
#
#
#EXTREMELY VULNERABLE
#
#Length: Less than 6 characters
#Content: Only letters or only digits (e.g., 123456, azerty)
#No mix of uppercase/lowercase, symbols, or digits
#
#
#VULNERABLE
#
#Length: Between 6 and 8 characters
#Low complexity: letters and digits only, little variation
#No special characters
#
#NORMAL
#
#Length: Between 8 and 12 characters
#Includes letters (uppercase + lowercase) and digits
#May include one special symbol (!, @, etc.)
#
#SECURE
#
#Length: At least 12 characters
#Contains uppercase, lowercase, digits, and special characters
#
#PERFECT
#
#Length: 16+ characters
#Fully random or generated by a password manager



#Coding : utf-8
#Coding by Yodavatar
#Licensed code MIT License
#App : PasswordGenerator